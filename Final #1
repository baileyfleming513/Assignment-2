import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def loadImage(filename):
    img = mpimg.imread(filename)
    if type(img[0,0,0] == np.float32):
        img = img * 255
        return np.float64(img)
    else:
        return np.float64(img)

def saveImageRGB(imageData, scale=False, format="RGB"):
    if scale == False:
        imageData[imageData > 255] = 255
    if scale == True:
        imageData = imageData - np.min(imageData)
        imageData = imageData/np.max(imageData)
        imageData = imageData * 255
        imageData = np.uint8(np.round(imageData))
        return plt.savefig(imageData.jpeg)

def rgb2hsl(imageData):
    (rows, cols, colourlength) = imageData.shape
    for row in range(0,rows):
        for col in range(0,cols):
            (R, G, B) = imageData[row,col,:]
            R2 = R/255; G2 = G/255; B2 = B/255
            Cmax = np.max((R2,G2,B2)); Cmin = np.min((R2,G2,B2))
            D = Cmax - Cmin
            L = (Cmax + Cmin)/2
            S = D/(1 - np.abs(2*L-1))
            if D == 0:
                H = 0
                S = 0
            elif Cmax == R2:
                H = 60 * np.mod6((G2 - B2)/D)
            elif Cmax == G2:
                H = 60 * (((B2 - R2)/D) + 2)
            elif Cmax == B2:
                H = 60 * (((R2 - G2)/D) + 4)
            imageData[row,col,:] = (H,L,S)
    return imageData

def hsl2rgb(imageData):
    (rows, cols, colourlength) = imageData.shape
    for row in range(0,rows):
        for col in range(0,cols):
            (H, S, L) = imageData[row,col,:]
            C = (1-np.abs(2*L-1))*S
            X = C *(1-np.abs(np.mod(H/60,2)-1))
            m = L - (C/2)
            if 0 <= H < 60:
                (R2,G2,B2) = (C,X,0)
            elif 60 <= H < 120:
                (R2,G2,B2) = (X,C,0)
            elif 120 <= H < 180:
                (R2,G2,B2) = (0,C,X)
            elif 180 <= H < 240:
                (R2,G2,B2) = (0,X,C)
            elif 240 <= H < 300:
                (R2,G2,B2) = (X,0,C)
            elif 300 <= H < 360:
                (R2,G2,B2) = (C,0,X)
            (R,G,B) = ((R2+m)*255), ((G2+m)*255), ((B2+m)*255)
            imageData[row,col,:] = (R,G,B)
    return imageData

def showImageRGB(imageData):
    tmp = imageData.copy()
    tmp[tmp > 255] = 255; tmp[tmp < 0] = 0
    tmp = np.uint8(tmp)
    plt.imshow(tmp)
    plt.axis("off")
    
def brightnessRBG(imageData, b, changeType="absolute"):
    if changeType == "relative":
        imageData = imageData*b
        return imageData
    elif changeType == "absolute":
        imageData + [0,0,b]
        return imageData
    
def contrastRBG(imageData, c):
    (rows,cols,colourlength) = imageData.shape
    for row in range(0,rows):
        for col in range(0,cols):
            (R,G,B) = imageData[row,col,:]
            R = (c*(R-127.5) + 127.5)
            G = (c*(G-127.5) + 127.5)
            B = (c*(B-127.5) + 127.5)
            imageData[row,col,:] = (R,G,B)
    return imageData

def saturationHSL(imageData, amount):
    (rows,cols,colourlength) = imageData.shape
    for row in range(0,rows):
        for col in range(0,cols):
            (H,S,L) = imageData[row,col,:]
            S = S*amount
            imageData[row,col,:] = (H,S,L)
    return imageData

def tonemapHSL(imageData, h, s):
    (rows, cols, colourlength) = imageData.shape
    for row in range(0,rows):
        for col in range(0,cols):
            (H,S,L) = imageData[row,col,:]
            H = h; S = s
            imageData[row,col,:] = (H,S,L)
    return imageData

def crop(imageData,top,bot,left,right):
    (row,col,colourlength) = imageData.shape
    if bot >= -1:
        return print("Bot input must be smaller than -1"), imageData
    elif right >= -1:
        return print("Right inpuit must be smaller than -1"), imageData
    else:
        return imageData[top:bot,left:right]
